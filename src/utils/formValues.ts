import { FieldType } from "./enum";
import { ValidationField } from "./types";

export const customNumValField: ValidationField[] = [
  {
    key: "minValField",
    type: FieldType.Number,
    label: "Minimum number",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "min",
    validationText: "Invalid minimum number",
  },
  {
    key: "maxValField",
    type: FieldType.Number,
    label: "Maximum number",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "max",
    validationText: "Invalid maximum number",
  },
  {
    key: "lessThanField",
    type: FieldType.Number,
    label: "Less than",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "lessThan",
    validationText: "Invalid less than",
  },
  {
    key: "lessThanField",
    type: FieldType.Number,
    label: "More than",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "moreThan",
    validationText: "Invalid more than",
  },
  {
    key: "positive",
    type: FieldType.Boolean,
    label: "Is a positive number",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "positive",
    validationText: "Not a positive number",
  },
  {
    key: "negative",
    type: FieldType.Boolean,
    label: "Is a negative number",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "negative",
    validationText: "Not a negative number",
  },
  {
    key: "integer",
    type: FieldType.Boolean,
    label: "Is an integer",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "integer",
    validationText: "Not an integer",
  },
];

export const customStringValField: ValidationField[] = [
  {
    key: "strLenField",
    type: FieldType.Number,
    label: "Length",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "length",
    validationText: "Invaid length",
  },
  {
    key: "minLenField",
    type: FieldType.Number,
    label: "Minimum length",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "min",
    validationText: "Invalid min length",
  },
  {
    key: "maxLenField",
    type: FieldType.Number,
    label: "Maximum Length",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "max",
    validationText: "Invalid max length",
  },
  {
    key: "matchField",
    type: FieldType.String,
    label: "String match regex",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "matches",
    validationText: "Invalid match",
  },
  {
    key: "email",
    type: FieldType.Boolean,
    label: "Is an email",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "email",
    validationText: "Invalid email",
  },
  {
    key: "url",
    type: FieldType.Boolean,
    label: "Is an url",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "url",
    validationText: "Invalid url",
  },
  {
    key: "uuid",
    type: FieldType.Boolean,
    label: "Is an UUID",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "uuid",
    validationText: "Invalid UUID",
  },
];

export const customDateValField: ValidationField[] = [
  {
    key: "minDate",
    type: FieldType.Date,
    label: "Minimum Date",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "min",
    validationText: "Invalid minimum date",
  },
  {
    key: "maxDatr",
    type: FieldType.Date,
    label: "Maximum Date",
    value: "",
    error: false,
    errorText: "",
    validationMethod: "max",
    validationText: "Invalid maximum date",
  },
];
